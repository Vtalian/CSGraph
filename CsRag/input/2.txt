第2章 实践工具
1. kernel与Shell
Shell 跟 kernel（内核）相对应，是内核外面的一层，即用户跟内核交互的对话界面。Shell 是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境。Shell 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。Shell 是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 Shell 命令写出各种小程序，又称为 Shell 脚本。这些脚本都通过 Shell 的解释执行，而不通过编译。Shell 也是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。
1.1 Shell命令
进入命令行环境以后，用户会看到 Shell 的提示符。提示符往往是一串前缀，最后以一个美元符号 $ 结尾，用户可以在这个符号后面输入各种命令。
执行一个简单的命令 pwd ：
$pwd
/root
root：表示用户名；
iZm5e8dsxce9ufaic7hi3uZ：表示主机名；
~：表示目前所在目录为家目录，其中 root 用户的家目录是 /root 普通用户的家目录在 /home 下；
#：指示你所具有的权限（ root 用户为#，普通用户为$）。
注： root 是超级用户，具备操作系统的一切权限。
·命令格式
Linux命令行的语法结构：
$ command [[-]option(s)][option argument(s)] [command argument(s)]
$：linux系统提示符，您的linux系统可能是其他的提示符；
Command ：linux命令的名字；
[[-]option(s)]：改变命令行为的一个或多个修饰符，即选项；
[option argument(s)]：选项的参数；
[command argument(s)]：命令的参数；
掌握表1-1中常用命令：

图1-1 Linux常用命令
·长短参数
单个参数：ls -a（a 是英文 all 的缩写，表示“全部”）；
多个参数：ls -al（全部文件 + 列表形式展示）；
单个长参数：ls --all；
多个长参数：ls --reverse --all；
长短混合参数：ls --all -l。
·参数值
短参数：command -p 10（例如：ssh root@121。42。11。34 -p22）
长参数：command --paramters=10（例如：sshroot@121。42。11。34--port=22）

·快捷方式
通过上下方向键↑↓来调取过往执行过的 Linux 命令；
命令或参数仅需输入前几位就可以用 Tab 键补全；
Ctrl+R ：用于查找使用过的命令（history 命令用于列出之前使用过的所有命令，然后输入 ! 命令加上编号( !2 )就可以直接执行该历史命令）；
Ctrl+L：清除屏幕并将当前行移到页面顶部；
Ctrl+C：中止当前正在执行的命令；
Ctrl+U：从光标位置剪切到行首；
Ctrl+K：从光标位置剪切到行尾；
Ctrl+W：剪切光标左侧的一个单词；
Ctrl+Y：粘贴 Ctrl+U|K|Y 剪切的命令；
Ctrl+A：光标跳到命令行的开头；
Ctrl+E：光标跳到命令行的结尾；
Ctrl+D：关闭 Shell 会话。
1.2 文件的组织
在Linux系统中，目录被组织成一个单根倒置树结构，文件系统从根目录开始，用/来表示。文件名称区分大小写（大小写敏感还需要看具体的文件系统格式）。以。开头的为隐藏文件，路径用/来进行分割（windows中使用\来分割），文件有两个种类：元数据与数据本身。在操作linux系统时，通常会遵循以下的分层结构规则：
/：根目录，位于Linux文件系统目录结构的顶层，一般根目录下只存放目录，不要存放文件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中。
/bin：提供用户使用的基本命令，存放二进制命令，不允许关联到独立分区，OS启动会用到里面的程序。

图1-2 Linux文件系统目录结构
/boot：用于存放引导文件，内核文件，引导加载器。
/sbin：管理类的基本命令，不能关联到独立分区，OS启动时会用到的程序（重要的命令通常处于bin，不重要的则安装在sbin）。
/lib：存放系统在启动时依赖的基本共享库文件以及内核模块文件。系统使用的函数库的目录也存放了大量的脚本库文件，程序在执行过程中，需要调用时会用到
/lib64：存放64位系统上的辅助共享库文件。
/etc： 系统配置文件存放的目录，该目录存放系统的大部分配置文件和子目录，不建议在此目录下存放可执行文件。
/home：普通用户主目录，当新建账户时，都会分配在此，建议单独分区，并分配额外空间用于存储数据。
/root：系统管理员root的宿主目录，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下。
/media：便携式移动设备挂载点目录。
/mnt：临时文件系统挂载点。
/dev：设备（device）文件目录，存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，存放连接到计算机上的设备（终端、磁盘驱动器、光驱及网卡等）的对应文件(b随机访问，c线性访问)
/opt：第三方应用程序的安装位置。
/srv：服务启动之后需要访问的数据目录，存放系统上运行的服务用到的数据，如www服务需要访问的网页数据存放在/srv/www内。
/tmp：存储临时文件，任何人都可以访问，重要数据一定不要放在此目录下。
/usr：应用程序存放目录，/usr/bin 存放保证系统拥有完整功能而提供的应用程序， /usr/share 存放共享数据，/usr/lib存放不能直接运行的，却是许多程序运行所必需的一些函数库文件，_/usr/local 存放软件升级包，第三方应用程序的安装位置，/usr/share/doc_系统说明文件存放目录。
/var ：放置系统中经常要发生变化的文件，如日志文件。/var/log日志目录及文件。/var/tmp：保存系统两次重启之间产生的临时数据。
/proc：用于输出内核与进程信息相关的虚拟文件系统，目录中的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间
**/sys**：用于输出当前系统上硬件设备相关的虚拟文件系统。
/selinux：存放selinux相关的信息安全策略等信息。



1.3 用户与权限
1.3.1 用户
Linux 是一个多用户的操作系统。在 Linux 中，理论上来说，我们可以创建无数个用户，但是这些用户是被划分到不同的群组里面的，有一个用户，名叫 root ，是一个很特殊的用户，它是超级用户，拥有最高权限。
自己创建的用户是有限权限的用户，这样大大提高了 Linux 系统的安全性，有效防止误操作或是病毒攻击，但是我们执行的某些命令需要更高权限时可以使用 sudo 命令。
sudo：以 root 身份运行命令：
$sudo date                                                                     
查看日期是不需要sudo的这里只是演示，sudo 完之后一般还需要输入用户密码的复制代码。
1.3.2 群组的管理
Linux 中每个用户都属于一个特定的群组，如果你不设置用户的群组，默认会创建一个和它的用户名一样的群组，并且把用户划归到这个群组。
1.3.3 文件权限管理
在Linux系统中，一个文件的用户类型有三种：所有者(owner users)、组(group users)、其他人(other users)。Linux系统中，文件有三种访问权限： 读(r)--允许读某个文件；写(w)--允许 写、修改和删除某个文件；执行(x)--允许执行(run)某个文件。对于一个目录而言：读(r)--允许用户列出目录的内容，使用ls命令；写(w)-- 允许用户在目录下建立新文件，删除子目录和文件；执行(x)--允许用户搜索这个 目录，用cd命令。
在 Linux 中我们可以使用 ll 或者 ls –l 命令来显示一个文件的属性以及文件所属的用户和组，如：
         
图1-3 Linux文件权限管理
在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。
当为d 则是目录；
当为 - 则是文件；
若是 l 则表示为链接文档(link file)；
若是 b 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；
若是 c 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。
接下来的字符中，以三个为一组，且均为 rwx 的三个参数的组合。其中， r 代表可读(read)、 w 代表可写(write)、 x 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 - 而已。每个文件的属性由左边第一部分的 10 个字符来确定。
从左至右用 0-9 这些数字来表示：
第 0 位确定文件类型，第 1-3 位确定属主（该文件的所有者）拥有该文件的权限。
第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。
其中，第 1、4、7 位表示读权限，如果用 r 字符表示，则有读权限，如果用 - 字符表示，则没有读权限；
第 2、5、8 位表示写权限，如果用 w 字符表示，则有写权限，如果用 - 字符表示没有写权限；第 3、6、9 位表示可执行权限，如果用 x 字符表示，则有执行权限，如果用 - 字符表示，则没有执行权限。
1.4 进程
当程序被系统调用到内存以后，系统会给程序分配一定的资源(cpu、内存、设备等)然后进行一系列的复杂操作，使程序变成进程以供系统调用。进程就是程序的一次运行过程，一个静态的可执行程序a.out的一次运行过程(./a.out去运行到结束)就是一个进程。内核中构建了一种数据结构，又称进程控制块PCB(process control block)，用来专门管理一个进程。
1.4.1 程序和环境变量
(1).运行前的准备：一个程序的开始是main函数。但是在main函数执行之前，操作系统下的应用程序还是需要执行一段引导代码才能去执行main函数。然后这段引导代码一般不需要我们自己去编写，而是在编译连接时由链接器将编译器中事先准备好的引导代码和我们的应用程序一起构成最终的可执行程序；
(2).加载器是操作系统中的程序。当执行一个程序时(譬如./a.out，譬如代码中用exec函数来运行)，加载器负责将这个程序加载到内存中去执行这个程序；
(3).程序的退出：可以有正常终止和非正常终止两种方式。程序中可以调用return、exit、_exit等指令正常终止，也可以自己或他人发信号(例如Ctrl+C就是一个信号)非正常终止进程。通过atexit函数来注册进程终止处理函数。退出前执行此终止处理程序；当atexit注册有多个进程终止处理函数，先注册的终止处理函数后执行；
(5).ubuntu中执行export命令来查看进程环境变量；
(6).每一个进程中都有一份所有环境变量构成的一个表格，进程中可以直接使用这些环境变量。进程环境表其实是一个字符串数组，用environ变量指向它。
1.4.2 多进程调度原理
操作系统中可以同时运行多个进程。宏观上多进程是一种并行的方式，在微观上需要在多个进程之间切换。调度器在多个进程之间进行切换。操作系统的调度器其实就是一个算法，用来决定先运行谁，后运行谁，谁运行多长时间。实际上现代操作系统最小的调度单元是线程而不是进程。
操作系统给每一个进程一个ID号来标识这个进程。我们可以通过ps命令在ubuntu中查看当前运行的进程信息，其中PID即为进程的ID号。最开始的是进程0和进程1。进程0为内核态，进程1为内核态过度到用户态的一个重要进程。所有的进程都源于进程1。
1.4.3 进程的创建
操作系统中构建一个全新的进程是非常复杂的事情。为了简化这个过程，采用分裂生长模式构建新的进程。操作系统会复制一个现有的进程生成一个新进程。老进程叫父进程，复制生成的新进程叫子进程。创建完成之后的父子进程会同时运行。新生成的子进程继承了一些父进程的属性，但是有着自己独立的PCB，同时也能被内核进行同等调度。
1.4.5 进程的5种状态
(1).就绪态：所有运行条件均就绪，只要得到了CPU时间就能直接运行；
(2).运行态：就绪态时得到了CPU就进入运行态开始运行；
(3).僵尸态：进程已经结束但是父进程还没来得及回收；
(4).等待态（浅度睡眠&深度睡眠）：进程在等待某种条件，条件成熟后可进入就绪态。等待态下就算你给他CPU调度进程也无法执行。浅度睡眠等待时进程可以被（信号）唤醒，而深度睡眠等待时不能被唤醒只能等待的条件到了才能结束睡眠状态；
(5).暂停态：暂停并不是进程的终止，只是被被人（信号）暂停了，还可以恢复的。
1.4.6 进程间的关系
(1).无关系：两个进程之间是完全独立的。无关的进程之间不能随便访问。
(2).父子进程：父进程继承给子进程的东西都是fork之前的。子进程变为僵尸进程后，需要父进程对它进行回收。
(3).进程组（group）：由若干进程构成一个进程组。也就是属主所在的组，他们的进程组ID相同，放在一个组的目的是为了方便管理这些进程。组内进程的关系比组外的更有联系。
(4).会话（session）：会话就是进程组的组。由若干进程组构成的组，就像几个班构成一个年级一样。
1.5 重定向、管道、流
在 Linux 中一个命令的去向可以有3个地方：终端、文件、作为另外一个命令的入参。命令一般都是通过键盘输入，然后输出到终端、文件等地方，它的标准用语是 stdin、stdout 以及stderr 。
标准输入(stdin) 是指令数据的输入，代码为0，使用<或者<<，默认是键盘；
标准输出(stdout)是指令执行成功返回的结果，代码为1，使用>或者>>，默认由屏幕显示；
标准错误输出(stderr)是指令执行失败返回的错误信息，代码为2，使用2>或者2>>，默认是屏幕。

图1-4Linux重定向、管道、流
1.5.1 重定向>
把本来要显示在终端的命令结果，输送到别的地方（到文件中或者作为其他命令的输入）。
1.5.2 输出重定向 >>
表示重定向到文件末尾，因此它不会像 > 命令这么危险，它是追加到文件的末尾（当然如果文件不存在，也会被创建）。我们平时读的 log 日志文件其实都是用这个命令输出的。
1.5.3 输入重定向 <
< 符号用于指定命令的输入。
1.5.4 输入重定向 <<
将键盘的输入重定向为某个命令的输入。
1.5.5 管道 |
把两个命令连起来使用，一个命令的输出作为另外一个命令的输入，英文是 pipeline ，可以想象一个个水管连接起来，管道算是重定向流的一种。

图1-5 Linux管道
1.6 Linux的联机帮助
1.6.1 help
命令名-help格式来显示该命令的帮助信息，如who --help。（给出其中一个命令—help的输出截图）
 
图1-6 who –help命令执行结果


1.6.2 man
可以获得每个Linux命令的使用说明，用man ls，man passwd， man pwd命令得到ls、passwd、pwd三个命令的帮助内容，输入q退出man命令。（给出其中一个命令使用man帮助后的输出截图） 
    
图1-7 man passwd命令执行结果
1.7 退出Linux
在命令行模式下输入init 0命令或在桌面上点击相应按钮退出Linux。
1.8 实验1
1.8.1 常用Linux命令
(1).$ls									（给出输出截图，同时解释命令作用）
列出当前目录下的文件和文件夹

截图1 命令执行结果
(2).$pwd								（给出输出截图，同时解释命令作用）
列出当前目录

截图2  pwd命令执行结果
(3).$mkdir test							（解释命令作用）
在当前目录下创建test目录
截图3  mkdir命令执行结果
(4).$touch                               （解释命令作用，同时给出输出截图）
新建文件
截图4  touch命令执行结果

(5).$cp 		                          （给出输出截图，同时解释命令作用）
复制文件
截图5  cp命令执行结果
(6).$cd test			               （给出输出截图，同时解释命令作用）
进入test目录
截图6  cd命令执行结果
(7).$mv                                    （给出输出截图，同时解释命令作用）
移动文件
截图7  mv命令执行结果
(8).$rm                                    （给出输出截图，同时解释命令作用）
删除文件。
$rm -rf mpc：删除mpc文件夹，f参数的作用是不给出提示直接删除；
截图8  rm命令执行结果
(9).$ps                                    （给出输出截图，同时解释命令作用）
列出系统中运行的进程，包括进程号、命令、CPU使用量、内存使用量等。
ps -a （列出所有运行中/激活进程）；
ps -ef |grep -（列出需要进程）；
ps -aux -（显示进程信息）。
          
截图9  ps命令执行结果
(10).$top                                 （给出输出截图，同时解释命令作用）
监视系统中不同的进程所使用的资源。
        
截图10  top命令执行结果
(11).$htop                                 （给出输出截图，同时解释命令作用）
通过文字图形化地显示每一个进程的CPU和内存使用量、swap使用量。使用上下光标键选择进程，F7和F8改变优先级，F9杀死进程。
        
截图11  top命令执行结果
(12).$kill                                 （给出输出截图，同时解释命令作用）
结束进程。如果进程没有响应杀死命令，使用-9参数强制杀死。
kill <pid>
kill -9 <pid>
killall -9 -杀死所有拥有同样名字的进程
pkill使用模式匹配，如进程名，进程拥有者等。
pkill <进程名>
     
                   
截图12  kill命令执行结果
(13).$w                                    （给出输出截图，同时解释命令作用）
当前登录用户及其正在执行的进程的信息：当前时间、系统运行时长、登录用户总数、过去的1、5、15分钟内的负载均衡数。
   
截图13  w命令执行结果
(14).$who                                  （给出输出截图，同时解释命令作用）
who是类似命令，提供当前登录用户列表、系统启动时间、运行级别等。
       
截图14  who命令执行结果
(15).$whoami 命令输出当前用户ID           （给出输出截图，同时解释命令作用）
         
截图15  whoami命令执行结果
思考题：
解释shell命令执行过程？例如执行”ls”命令时，怎么找到命令，如何与内核交互，又如何与cpu、内存、磁盘交流？

1.8.2 文本编辑器vi或者vim
vi和vim（vim兼容vi并可实现语法高亮）是我们在Linux中最常用的编辑器。vi或vim是Linux最基本的文本编辑工具，vi或vim虽然没有图形界面编辑器那样点鼠标的简单操作，但vi编辑器在系统管理、服务器管理字符界面中，永远不是图形界面的编辑器能比的。
vi有三种状态：命令模式(Command mode)、插入模式(Insert mode)和底行模式(Lastline mode)。各模式的功能区分如下：
命令模式：控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入插入模式或者底行模式。
插入模式：只有在插入模式下，才可以做文字输入，按「ESC」键可回到命令模式。
底行模式：在命令模式下，按「：」冒号键进入底行模式。可在底行模式下保存文件或退出vi，也可以设置编辑环境，如寻找字符串、列出行号等。
vi的基本操作
注：「#」号表示一个数字。

1.8.3 GCC基础知识
GNU CC(GNU Compiler Collections简称为GCC)是GNU项目中符合ANSI C标准的编译系统，能够编译用C、C++和Object C等语言编写的程序。GCC不仅功能强大，而且可以编译如C、C++、Object C、Java、Fortran、Pascal、Modula-3 和Ada等多种语言，而且GCC又是一个交叉平台编译器，它能够在当前CPU平台上为多种不同体系结构的硬件平台开发软件，因此尤其适合在嵌入式领域的开发编译。
1.8.3.1 GCC支持的文件格式
GCC支持如下源文件后缀、语言种类以及后期的操作：
.c	C源程序；预处理、编译、汇编；
.C	C++源程序；预处理、编译、汇编；
.cc	C++源程序；预处理、编译、汇编；
•cxx  C++源程序；预处理、编译、汇编； 
.m	Objective-C源程序；预处理、编译、汇编；
.i	预处理后的C文件；编译、汇编；
.ii	预处理后的C++文件；编译、汇编；
.s	汇编语言源程序；汇编；
.S	汇编语言源程序；预处理、汇编；
.h	预处理器文件。
其他后缀名的文件被传递给连接器(linker)，通常包括： 
.o 目标文件(Object file)；
.a归档库文件(Archive file)。
1.8.3.2 GCC的编译流程
有以下hello.c源代码：

GCC的编译流程分为预处理(Pre-Processing)、编译(Compiling)、汇编(Assembling)、链接(Linking)四步。
预处理：编译器将上述代码中的stdio.h编译进来。用户可以使用gcc 的选项“-E”查看编译预处理结果，具体命令如下：
$gcc -E hello.c -o hello.i
编译：gcc首先要检查代码的规范性、是否有语法错误等，以确定代码的实际要做的工作；检查无误后，gcc把代码翻译成汇编语言。用户可以使用“-S”选项来查看编译结果，只编译而不进行汇编，生成汇编代码，具体命令如下：
$gcc -S hello.i -o hello.s
汇编：gcc把编译阶段生成的“.s”文件转成elf目标文件。用户可使用选项“-c”看到汇编代码已转化为“.o”的二进制目标代码，具体命令如下：
$gcc -c hello.s -o hello.o
hello.o是二进制文件，不能用普通文本编辑器直接查看，可以用vim -b hello.o打开文件，然后输入:%!xxd命令转换为16进制。输入:%!xxd -r命令返回显示原文件。
链接：程序并没有定义“printf”函数，且在预编译中包含进的“stdio.h”中也只有该函数的声明，而没有定义函数。在哪里实现“printf”函数呢？系统把这些函数实现放在名为libc.so.6的库文件中去了。在没有特别指定时，GCC会到系统默认的搜索路径“/usr/lib”下查找，也就是链接到libc.so.6库函数中。这样就有函数“printf”的实现。
函数库一般分为静态库和动态库两种。静态库是指编译链接时，把库文件的代码全部加入到可执行文件中，因此生成的文件比较大，但在运行时也就不再需要库文件了。其后缀名一般为“.a”。动态库与之相反，在编译链接时并没有把库文件的代码加入到可执行文件中，而是在程序执行时由运行时链接文件加载库，这样可以节省系统的开销。动态库一般后缀名为“.so”，如前面所述的libc.so.6就是动态库。GCC在编译时默认使用动态库。链接的具体命令如下：
$gcc hello.o -o hello
1.8.3.3 常用参数
-x language filename 设定文件所使用的语言，使后缀名无效，对以后的多个文件有效，直到下一个参数的使用。
language可以是C、objective-C、C-header、C++、cpp-output、assembler、assembler-with-cpp；
例如: gcc -x c hello.pig
-x none filename 关掉上一个选项，即让 gcc 根据文件名后缀，自动识别文件类型；
例如： gcc -x c hello.pig -x none hello2.c
-c 只激活预处理，编译和汇编，生成后缀名.o的 obj 文件；
例如： gcc -c hello.c
-S 只激活预处理和编译，生成后缀名.s的汇编代码文件；
例如： gcc -S hello.c
-E 只激活预处理，不生成文件，你需要把它重定向到一个输出文件里面；
例如： gcc -E hello.c > pianoapan.txt
-o 指定目标名称，缺省的时候，gcc 编译出来的文件是a.out；
例如： gcc -o hello hello.c，gcc -o hello.asm -S hello.c
-pipe 使用管道代替编译中临时文件，在使用非 gnu 汇编工具的时候，可能有些问题；
例如： gcc -pipe -o hello.exe hello.c
-ansi 关闭gnu c中与ansi c不兼容的特性，激活ansi c的专有特性(包括禁止asm，inline，typeof关键字，以及unix，vax等预处理宏)；
-fno-asm 此选项实现ansi选项的功能的一部分，它禁止将asm，inline和typeof用作关键字；
-fno-strict-prototype 只对 g++ 起作用，使用这个选项，g++ 将对不带参数的函数，都认为是没有显式的对参数的个数和类型说明，而不是没有参数。 而 gcc 无论是否使用这个参数，都将对没有带参数的函数，认为是没有显式说明的类型；
-fthis-is-varialble 就是向传统 c++ 看齐，可以使用this当一般变量使用；
-fcond-mismatch 允许条件表达式的第二和第三参数类型不匹配，表达式的值将为 void 类型；
-funsigned-char， -fno-signed-char， -fsigned-char， -fno-unsigned-char这四个参数是对 char 类型进行设置，决定将 char 类型设置成unsigned char(前两个参数) 或者 signed char(后两个参数)；
-include file 包含某个代码，简单来说，就是当某个文件需要另一个文件的时候，就可以用它设定，功能就相当于在代码中使用#include<filename>；
例如： gcc hello.c -include /root/pianopan.h
-imacros file 将file文件的宏，扩展到gcc/g++的输入文件，宏定义本身并不出现在输入文件中。这个选项跟-include选项很像，但是任何通过扫描file产生的输出都被丢弃，定义的选项仍被定义，这允许你获得所有头文件的宏定义但不处理他的声明。所有该选项指定的文件将在-include选项指定的文件之前处理；
-Dmacro 相当于C语言中的#define macro；
-Dmacro=defn 相当于C语言中的#define macro=defn；
-Umacro 相当于C语言中的#undef macro；
-undef 取消对任何非标准宏的定义；
-Idir 在你使用#include "file"的时候，gcc/g++会先在当前目录查找你所指定的头文件，如果没有找到，他会到缺省的头文件目录找，如果使用-I指定了目录，他会先在你所指定的目录查找，然后再按常规的顺序去找。对于#include <file>，gcc/g++会到-I指定的目录查找，查找不到，然后将到系统的缺省的头文件目录查找；
-I- 就是取消前一个参数的功能，所以一般在-Idir之后使用；
-idirafter dir 在-I的目录里面查找失败，将到这个目录里面查找；
-iprefix prefix，-iwithprefix dir 一般一起使用，当-I的目录查找失败，会到prefix+dir下查找；
-nostdinc 使编译器不在系统缺省的头文件目录里面找头文件，一般和-I联合使用，明确限定头文件的位置；
-nostdinc++ 规定不在 g++ 指定的标准路经中搜索，但仍在其他路径中搜索，此选项在创建libg++库使用；
-C 在预处理的时候，不删除注释信息，一般和-E一起使用，有时候分析程序，用这个很方便的；
-M 生成文件关联的信息。包含目标文件所依赖的所有源代码，你可以用gcc -M hello.c 来测试一下，很简单；
-MM 和上面的那个一样，但是它将忽略由#include<file>造成的依赖关系；
-MD 和-M相同，但是输出将导入到.d的文件里面；
-MMD和-MM相同，但是输出将导入到.d的文件里面；
-Wa，option 此选项传递option给汇编程序；如果option中间有逗号，就将option分成多个选项，然后传递给汇编程序；
-Wl.option 此选项传递option给链接程序；如果option中间有逗号，就将option分成多个选项，然后传递给链接程序；
-llibrary 指定编译的时候使用的库 例如： gcc -lcurses hello.c；
-Ldir 指定编译的时候，搜索库的路径。如果不指定，编译器将只在标准库的目录找；
-O0、-O1、-O2、-O3 编译器的优化选项的4个级别，-O0表示没有优化，-O1为缺省值，-O3优化级别最高；
-g 指示编译器，在编译的时候，产生调试信息；
-gstabs 此选项以 stabs 格式生成调试信息，但是不包括 gdb 调试信息；
-gstabs+此选项以 stabs 格式生成调试信息，并且包含仅供 gdb 使用的额外调试信息；
-ggdb 此选项将尽可能的生成 gdb 可以使用的调试信息；
-static 此选项将禁止使用动态库；
-share 此选项将尽量使用动态库；
-traditional 试图让编译器支持传统的C特性；
-w 不生成任何警告信息，默认选项；
-Wall 生成所有警告信息。
1.8.3.4 常规用法
GCC有超过100个的可用选项，主要包括总体选项、告警和出错选项、优化选项和体系结构相关选项。详细资料请看附录C。
1.调试相关
gcc -v（输出编译细节）；
gcc -MM（生成和头文件的依赖关系）；
gcc -g3（生成调试信息，-gdwarf）；
gcc -ggdb3（生成gdb专用的调试信息）；
gcc -p（生成性能分析信息）；
gcc -pg（生成gdb专用的分析信息）；
2.警告相关
gcc -w（关闭所有警告）；
gcc -Wall（输出所有警告）；
gcc -Wno-deprecated（关闭使用废弃函数等用法的警告）；
gcc -fno-common（通知链接器，在遇到多个弱定义的全局符号时输出一条警告信息）；
3.改变隐藏的链接行为
gcc -nostartfiles（Do not use the standard system startup files when linking）；
gcc -nodefaultlibs（Do not use the standard system libraries when linking）；
gcc -nostdlib（Do not use the standard system startup files or libraries when linking）；
4.链接静态库 or 链接动态库
gcc -static（使用静态库进行链接，所有）；
gcc -static-libstdc++（使用静态库进行链接，指定某一个）；
gcc -Bdynamic（使用动态库进行链接，缺省值）；
5.so相关选项
gcc -fPIC（生成位置无关代码）；
gcc -shared（生成共享库，即so）；
gcc -Wl，-soname（指定生成共享库的soname）；
6.可执行程序相关选项
gcc -fPIE（生成位置无关代码）；
gcc -Wl，--as-needed（仅链接需要的动态库，有些版本gcc不支持）；
gcc -rdynamic（通知链接器，把符号导出到dynamic symbol list中，用于exe符号导出）；
gcc -Wl，--export-dynamic（同上）；
1.8.4 GDB基础知识
GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。如果在UNIX平台下设计软件，GDB这个调试工具有比VC、BCB的图形化调试器更强大的功能，同时GDB也有例如ddd这样的图形化调试端。
GDB是一个程序调试工具软件。GDB中有一个非常有用的命令补齐功能，如同Linux下shell命令解释器中的命令补齐功能一样，输入一个命令的前几个字符后再输入TAB键时，能补齐命令。如果有多个命令的前几个字符相同，则会发出警告声，再输入TAB键后，则将所有前几个字符相同的命令全部列出。
1.8.4.1启动GDB程序
可以在shell命令行提示符下输入“gdb”命令来启动GDB程序。假定shell命令行提示符为“unix>”，最常用的启动GDB程序的方式如下：
$gdb [可执行文件名]
该命令用于启动GDB程序并同时加载指定的将要被调试的可执行文件。如果仅输入“gdb”而没有带可执行文件名，则仅启动GDB程序，因此必须在GDB调试环境下再通过相应的GDB命令来加载需调试的可执行文件。
一旦启动GDB程序，则调试过程就在GDB调试环境下进行。
1.8.4.2常用GDB命令
在GDB调试环境下，大部分GDB命令都可以利用补齐功能以简便方式输入。如quit可以简写为q，因为以q打头的命令只有quit。list可以简写为1等。此外，按回车键将重复上一个命令。
在GDB调试环境下使用的GDB命令有很多，本附录仅介绍最常用的几个。
·help [命令名]
若想了解某个GDB命令的用法，最方便的方法是使用help命令。例如，在gdb提示符下输入help list将显示list命令的用法。
·file <可执行文件名>
如果在启动GDB程序时忘记加可执行文件名，则在调试环境下可用file命令指定需加载并调试的可执行文件。例如，可用命令“file./hello”加载当前目录下的hello程序。注意，可执行文件的路径名一定要正确。
·run [参数列表]
run命令用来启动并运行己加载的被调试程序，如果被调试程序需要参数，则在 run后接着输入参数列表，参数之间用空格隔开。
·list [显示对象]
list命令用来显示一段源程序代码，参数通常有以下几种：
<linenum>：行号，显示对象为指定行号前、后若干行源码；
<+offset>：相对当前行的正偏移量，显示对象为当前行的后面若干行源码；
<-offset>：相对当前行的负偏移量，显示对象为当前行的前面若干行源码；
<filename；linenum >:显示对象为指定文件中指定行号前、后若干行源码；
<function >：函数名，显示对象为指定函数的源码；
<filename：function >：显示对象为指定文件中指定函数的源码；
<* address >：地址，显示指定地址处的源码。
·break [需设置的断点]
break命令用来对被调试程序设置断点，参数通常有以下几种：
< linenum >：行号，在当前源文件中的指定行处设置断点；
<filename：linenum>：在指定文件的指定行处设置断点；
<function >：函数名，在指定函数的入口处设置断点；
<filename；function >：在指定文件中指定函数的入口处设置断点；
<* address >：地址，在指定地址处设置断点；
<condtion >：条件，只有在某些特定的条件成立时程序才会停下，称为条件断点。
设置一个断点后，它的起始状态是有效。可以用enable、disable来使某断点有效或无效，也可以用delete命令删除某断点。例如，可以用命令“disable 2”使2号断点无效，用“delete 2”删除2号断点。
·info br∣source∣stack∣args∣…
info命令用来查看被调试程序的信息，其参数非常多，但大部分不常用。其中，info br查看设置的所有断点的详细信息，包括断点号、类型、状态、内存地址、断点在源程序中的位置等；info source查看当前源程序；info stack查看栈信息，它反映了过程（函数）之间的调用层次关系；info args查看当前参数信息；info win显示窗口的大小。
·watch <表达式>
watch命令用来观察某个表达式或变量的值是否被修改，一旦修改则暂停程序执行。
·print <表达式>
print命令用来显示表达式的值，表达式中的变量必须是全局变量或当前栈区可见的变量。否则GDB会显示以下类似信息：
No symbol "xxxxx" 1n current context；
print bb：打印变量；
print $bb ：打印寄存器。
·x /NFU address
x命令用来检查内存单元的值，x是examine的意思。其中N代表重复数，F代表输出格式，U代表每个数据单位的大小，上述命令表示从地址address开始以F格式显示N个大小为U的数值。若不指定N，则默认为1；若不指定U，则默认为每个数据单位为4个字节。F的取值可以是x(十六进制整数)、d(带符号十进制整数)、u(无符号十进制整数)或f(浮点数格式)；U的取值可以是b(字节)、h(双字节)、w(四字节)或g(八字节)。例如，命令x/8ub 0x8049000表示如下含义：以无符号十进制整数格式(u)显示8个字节(b)，即显示存储单元0x8049000、0x8049001、0x8049002和0x8049003中的内容。 
·step
使用step命令可以跟踪进入到一个函数的内部。 
·next
使用next命令继续执行下一条语句，若当前语句中包含函数调用，则不会进入函数内部，而是完成对当前语句中的函数调用后跟踪到下一条语句。 
·continue
当程序在断点处暂停执行后，可以用continue命令使程序继续执行下去。 
·quit
使用quit命令可退出GDB。
·display
display 表达式：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。
(gdb)display /i $pc        //命令可以在调试时显示每条汇编命令
·layout
设置布局模式：
layout next：切换到下一个布局模式；
layout prev：切换到上一个布局模式；
layout src：只显示源代码，退出方法为Ctrl+X+A；
layout asm：只显示汇编代码；
layout split：显示源代码和汇编代码；
layout regs：增加寄存器内容显示；
focus cmd/src/asm/regs/next/prev：切换当前窗口；
refresh /Ctrl+L ：刷新所有窗口；
tui reg next：显示下一组寄存器；
38：显示系统寄存器；
update：更新源代码窗口和当前执行点；
·watch
watch 表达式：设置一个监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序：
(gdb)watch a
·set
使用set命令修改临时变量的值时：
(gdb) set variable key = value
(gdb) set variable array[1] = 12
也可以用print命令修改：
(gdb) print  key=value
(gdb) print array[1] = 12
1.8.4.3 GDB调试步骤
步骤1：启动GDB调式工具，加载要执行的目标文件：
直接启动目标文件：
$gdb 可执行目标文件 	//启动GDB调试工具，并加载程序
先启动gdb，再启动目标文件：
$gdb 	//启动GDB调试工具
(gdb)file 可执行目标文件 	//加载程序
步骤2：设置断点：
(gdb)list(l) 	//显示源码
(gdb)break main 	//在main函数的入口处设置断点
(gdb)break gdbtest.c:3 	//源程序gdbtest.c的第3行处设置断点
(gdb)info break(info b) 	//查看断点
步骤3：启动程序运行：
(gdb)run 	//程序会在断点处停下
步骤4：查看程序运行时的当前状态：
(gdb)print(p) 	//查看变量
(gdb)print $eax 	//查看变量
(gdb)info register(s)  	//查看所有寄存器
(gdb)info register eax 	//查看eax寄存器
(gdb)set varaib eax 	//查看eax寄存器
(gdb)set i = 3　　	//改变程序中某个变量的值
(gdb)set $eax = 3　　	//改变eax寄存器的值
(gdb)set args arg1 arg2	//设置运行参数set args 10 20 30 40 50
(gdb)show args	//命令可以查看设置好的运行参数。
(gdb)path 	//可设定程序的运行路径
(gdb)show paths 	//查看程序的运行路径
(gdb)set environment varname [=value] //设置环境变量。如：set env USER=hchen
(gdb)show environment [varname] //查看环境变量
(gdb)print(p) 	//查看变量
(gdb)finish  	//已经进入了函数，退出该函数返回到调用函数中
(gdb)until	//结束当前循环
(gdb)whatis	//显示变量或函数类型
步骤5：继续执行下一条指令或语句:
(gdb)next(n)        	//单步执行，逐过程调试
(gdb)step(s) 	//单步执行，逐语句调试
(gdb)continue(c) 	//继续执行，从断点位置继续运行
(gdb)si 	//执行一条机器指令
(gdb)s 	//执行一条c语句
步骤6：退出调试：
(gdb)quit
示例源程序test.c
#include <stdio.h> 
int func(int n){
int sum=0,i;
for(i=0;i<＝n;i++){
     sum+=i;
}
return sum;
}
int main(){
int i; 
long result =0; 
for(i=1;i<=100;i++){
result+=i;
}
printf("result[l-100]=%d\n",result);
printf("result[l-250]=%d\n",func(250));
return 1;
}
Linux下编译生成执行文件：
$gcc -g tst.c -o tst
在编译时，我们必须要把调试信息加到可执行文件中。使用编译器(gcc)的-g参数可以做到这一点。
使用GDB调试：
$gdb tst   	//启动GDB
GNU gdb 5.1.1
Copyright 2002 Free Software Foundation， Inc.
GDB is free software， covered by the GNU General Public License， and you are welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying"' to see the conditions.
There is absolutely no warranty for GDB. Type "show warranty" for details.
This GDB was configured as〃i386-suse-linux〃...
(gdb) 1 <-----------------------1命令相当于list，从第一行开始例出原码。
1 #include
2 
3 int func（int n）
4 {
5 int sum=0， i; 
6 for(i=0; i
7 {
8 sum+=i;
9 }
10 return sum;
(gdb) 	<--------------------------直接回车表示，重复上一次命令
11 }
12
13
14 main ()
15 {
16 int i;
17 long result = 0;
18 for（i=l; i<=100; i++）
19 {
20 result += i;
(gdb) break 16 <-------------------设置断点，在源程序第16行处。
Breakpoint 1 at 0x8048496: file tst.c，line 16.
(gdb) break func <-----------------设置断点，在函数func()入口处。
Breakpoint 2 at 0x8048456: file tst.c，line 5.
(gdb) info break  <-----------------查看断点信息。
Num Type Disp Enb Address What
1 breakpoint keep y 0x08048496 in main at tst.c:16
2 breakpoint keep y 0x08048456 in func at tst.c:5
(gdb) r <-----------------运行程序，run命令简写
Starting program:	/home/benben/test/tst
Breakpoint 1，main () at tst. c: 17 <------在断点处停住。
17 long result = 0;
(gdb) n <-----------------------------单条语句执行，next命令简写。
18 for(i=l; i<=100; i++)
(gdb) n
20 result +＝ i;
(gdb) n
18 for(i=l; i<=100; i++)
(gdb) n
20 result += i;
(gdb) c <------------------------------继续运行程序，continue命令简写。
Continuing.
result [1-100] = 5050 <---------------程序输出。
Breakpoint 2， func (n=250) at tst.c:5
5 int sum=0，i;
(gdb) n
6 for（i=l; i<=n; i++）
(gdb) p i <---------------------------打印变量i的值，print命令简写。
$1 = 134513808 
(gdb) n 
8 sum+=i;
(gdb) n
6 for (i=l; i<=n; i++)
(gdb) p sum 
$2 =1
 (gdb) n 
8 sum+=i;
(gdb) p i 
$3 = 2 
(gdb) n
6 for(i-1; i<=n; i++)
(gdb) p sum 
$4 = 3
(gdb) bt <-----------------------------查看函数堆栈。
#0 func (n=250) at tst. c:5
#1 0x080484e4 in main() at tst.c:24
#2 0x400409ed in libc start main() from /lib/libc.so.6
(gdb) finish <-------------------------退出函数。
Run till exit from #0 func (n=250) at tst. c:5 
0x080484e4 in main() at tst.c:24 
24 printf("result[1-250] = %d", func(250));
Value returned is $6 = 31375
(gdb) c <------------------------------继续运行。
Continuing.
result[l-250] = 31375 <----------------程序输出。
Program exited with code 027. <--------程序退出，调试结束。
(gdb) q <------------------------------退出gdb。
$
1.8.4.4 GDB常用命令
GDB的命令可以使用help命令来查看，如下所示：
$gdb 
GNU gdb 5.1.1
Copyright 2002 Free Software Foundation， Inc.
GDB is free software， covered by the GNU General Public License， and you are welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB. Type "show warranty" for details.
This GDB was configured as "i386-suse-linux".
(gdb) help
List of classes of commands：
aliases -- Aliases of other commands
breakpoints -- Making program stop at certain points
data -- Examining data
files -- Specifying and examining files
internals -- Maintenance commands
obscure -- Obscure features
running -- Running the program
stack -- Examining the stack
status -- Status inquiries
support -- Support facilities
tracepoints -- Tracing of program execution without stopping the program user-defined -- User-defined commands

Type "help" followed by a class name for a list of commands in that class.
Type "help" followed by command name for full documentation.
Command name abbreviations are allowed if unambiguous.
(gdb)
GDB的命令很多，GDB把之分成许多个种类。help命令只是例出GDB的命令种类，如果要看种类中的命令，可以使用help命令，如：help breakpoints，查看设置断点的所有命令。也可以直接help来查看命令的帮助。
GDB中输入命令时，可以不用打全命令，只用打命令的前几个字符就可以。当然命令的前几个字符应该要标志着一个唯一的命令。在Linux下，可以敲击两次TAB键来补齐命令的全称；如果有重复的，那么GDB会把全部列举出来。


1.8.5 objdump基础知识
objdump是gcc工具链中的反汇编工具，作用是由编译链接好的elf格式的可执行程序反过来得到汇编源代码。反汇编的原因有以下：
(1).调试程序时，反汇编代码可以帮助我们理解程序，尤其是在理解链接脚本、链接地址等概念时；
(2).把C语言源代码编译链接生成的可执行程序反汇编后得到对应的汇编代码，可以帮助我们理解C语言和汇编语言之间的对应关系。
1.8.5.1 反汇编命令
反汇编命令如下：
$objdump -d hello> hello.s
-d表示反汇编；
>(重定向符)左边的是elf的可执行程序(反汇编时的原材料)，>右边的是反汇编生成的反汇编程序；
更多的选项请参看附录E OBJDUMP命令。
objdump命令是Linux下的反汇编目标文件或者可执行文件的命令，以可阅读的格式更多地了解二进制文件可能带有的附加信息。
1.8.5.2 参数选项
1.8.5.4 符号表字段
关于符号表字段下面直接只介绍部分常用的：
.text：已编译程序的机器代码。
.rodata：只读数据，比如printf语句中的格式串和开关（switch）语句的跳转表。
.data：已初始化的全局C变量。局部C变量在运行时被保存在栈中，既不出现在.data中，也不出现在.bss节中。
.bss：未初始化的全局C变量。在目标文件中这个节不占据实际的空间，它仅仅是一个占位符。目标文件格式区分初始化和未初始化变量是为了空间效率在：在目标文件中，未初始化变量不需要占据任何实际的磁盘空间。
.symtab：一个符号表（symbol table），它存放在程序中被定义和引用的函数和全局变量的信息。一些程序员错误地认为必须通过-g选项来编译一个程序，得到符号表信息。实际上，每个可重定位目标文件在.symtab中都有一张符号表。然而，和编译器中的符号表不同，.symtab符号表不包含局部变量的表目。
.rel.text：当链接噐把这个目标文件和其他文件结合时，.text节中的许多位置都需要修改。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非使用者显式地指示链接器包含这些信息。
.rel.data：被模块定义或引用的任何全局变量的信息。一般而言，任何已初始化全局变量的初始值是全局变量或者外部定义函数的地址都需要被修改。
.debug：一个调试符号表，其有些表目是程序中定义的局部变量和类型定义，有些表目是程序中定义和引用的全局变量，有些是原始的C源文件。只有以-g选项调用编译驱动程序时，才会得到这张表。
.line：原始C源程序中的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时，才会得到这张表。
.strtab：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。
1.8.5.5 使用举例
1.反汇编应用程序
objdump -d main.o 
反汇编，留C语句，程序保存到文件
objdump -S number>number.txt 
-S保留C语句，
> 保存到文件
2.显示文件头信息 
objdump -f main.o
3.显示制定section段信息(comment段)
objdump -s -j .comment main.o
4.查看PLT表
objdump -d -j .plt main.o
5.查看GOT表
objdump -R main.o
1.8.6  gpref
gpref是GNU工具之一，它是一个剖析程序（profiler），通过编译时在每个函数的出入口加入剖析代码来监控程序在用户态的执行信息，可以得到每个函数的调用次数、执行时间、调用关系等信息，从而便于程序员查找用户程序的性能瓶颈。但是，对于很多时间都在内核态执行的程序，并不适合用gprof进行剖析。
gprof是gcc/g++编译器支持的一种性能诊断工具。只要在编译时加上-pg选项，编译器就会在编译程序时在每个函数的开头加一个mcount函数调用，在每一个函数调用之前都会先调用这个mcount函数，在mcount中会保存函数的调用关系图和函数的调用时间和被调次数等信息。最终在程序退出时保存在gmon.out文件中，需要注意的是程序必须是正常退出或者通过exit调用退出，因为只要在exit()被调用时才会触发程序写gmon.out文件。
gprof的使用方法主要以下三步：
会用-pg参数编译程序；
运行程序gprof -b ./hello gmon.out，并正常退出；
查看gmon.out文件。
1.8.7. oprofile
有些剖析工具可以对内核运行情况进行剖析。例如，oprofile是一个开源的剖析工具，它使用处理器中的性能监视硬件来监控关于内核以及可执行文件的执行信息，监控开销化比较小，而且统计信息较多，可以统计诸如Cache缺失率、主存访问信息、分支预测错误率等。这些信息使用gprof是无法得到的。不过，oprofile不能得到函数调用次数。
总之，gprof工具较简单，适合于查找用户程序的瓶颈。而oprofile工具稍显复杂，能得到更多性能方面的信息，更适合剖析系统软件。
1.9实验2
1.9.1.使用GCC编译器编译程序
使用vi或vim编写1-1.c源代码        （给出编写完成的代码截图）

截图1 hello.c源代码截图
1.9.1.1使用GCC编译器预处理2-1.c          （给出命令并查看的2-1.i截图）
$gcc -E 2-1.c -o 2-1.i

截图2 预处理后的源代码截图
1.9.1.2编译                                （给出命令并查看的2-1.s截图）
$gcc -S 2-1.i -o  2-1.s
截图3 编译后的汇编代码截图
1.9.1.3汇编                                （给出命令并查看的2-1.o截图）
$gcc -c 2-1.s -o 2-1.o
vi/vim打开二进制文件时要加参数"-b",不然会报文件第一行错误。
$vim -b 2-1.o
vi/vim打开文件后默认是文本格式的,用":%!xxd"可以切换到十六进制编辑：
:%!xxd
:%!xxd：将当前文本转换为16进制格式；
:%!od：将当前文本转换为16进制格式；
:%!xxd -c 12：将当前文本转换为16进制格式,并每行显示12个字节；
:%!xxd -r：将当前文件转换回文本格式；

截图4 汇编后的代码截图
·链接                                  （给出命令并查看的2-1截图）
$gcc 2-1.o -o 2-1

截图5 链接后的代码截图
1.9.2.使用GDB调试程序
输入以下2-2.c源代码                   （给出编写完成的2-2代码截图）
#include <stdio.h> 
int func1(){
int a=1;
short b=2;
char c=3;
unsigned d=4;
a=b;
a=c;
a=d;
b=a;
c=a;
d=a;
}
int func2(int n){
int sum=0,i;
for(i=0;i<=n;i++){
sum+=i;
}
return sum;
}
int main(){
int i; 
long result =0; 
for(i=1;i<=100;i++){
result+=i;
}
printf("result[l-100]=%d\n",result);
printf("result[l-250]=%d\n",func(250));
return 1;
}
截图6 tst.c源代码截图
1.9.2.1编译程序:                                       （给出命令并截图）
$gcc -g 2-2.c -o 2-2
截图7 编译截图
1.9.2.2调试：
步骤1：启动调试命令：                                （给出命令并截图）

截图8 启动调试截图
步骤2：设置断点:                                （给出命令并截图）
(gdb)list(l) 	//显示源码
(gdb)break func1 	//在main函数的入口处设置断点
(gdb)break 9 	//源程序gdbtest.c的第3行处设置断点
(gdb)info break(info b) 	//查看断点
(gdb)layout split 	//改变显示布局
(gdb)layout regs 	//显示寄存器内容
截图9 设置断点截图


步骤3：启动程序运行:                                （给出命令并截图）

截图10 启动程序运行截图
步骤4：查看程序运行时的当前状态:                    （给出命令并截图）

截图11 调试截图
步骤5：继续执行下一条指令或语句:                    （给出命令并截图）
截图12 跟踪截图
步骤6：退出调试:                                    （给出命令并截图）
截图13 退出命令截图
1.9.3 使用objdump和gdb调试程序
输入2-3.c程序                              （给出编写完成的代码截图）
#include "stdio.h" 
void main( ) { 
int ai = 100， bi = 2147483648， ci = -100; 
unsigned au = 100， bu = 2147483648， cu = -100; 
printf("ai=%d， bi=%d， ci=%d \n"， ai， bi， ci); 
printf("au=%u ， bu=%u， cu=%u \n"， au， bu， cu); 
}
截图14 编辑程序截图
1.9.3.1编译程序                        （给出带-g选项的编译命令，并截图）
$gcc -g 1-3.c -o 1-3 
截图15 编译程序截图
1.9.3.2反编译程序                                    （给出命令，并截图）
//反汇编可执行程序
$objdump -d 1-3
截图16 反编译程序截图
//反汇编可重定位程序
$objdump -d 1-3.o 
截图17 反编译程序截图
//反汇编，-S保留C语句，> 保存到文件
$objdump -S 1-3> 1-3.txt 

截图18 反编译程序截图
//显示文件头信息 
$objdump -f 1-3.o

截图19 反编译程序截图
//显示制定section段信息(comment段)
$objdump -s -j .comment 1-3.o

截图20 反编译程序截图
1.9.3.3调试程序，查看ai、bi、ci、au、bu、cu的值及变量地址上的内容（给出命令并截图）

截图21 查看变量值，变量地址及变量地址上的内容截图